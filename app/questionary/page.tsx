'use client';

import Link from 'next/link';
import { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';

const surveyQuestions = {
  fitnessGoal: {
    label: '–Ø–∫–∞ —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞ —Ü—ñ–ª—å?',
    options: [
      'üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—ñ—Ä –º‚Äô—è–∑–æ–≤–æ—ó –º–∞—Å–∏',
      'ü•ó –°—Ö—É–¥–Ω–µ–Ω–Ω—è',
      '‚öñÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏',
      'ü•¶ –ó–¥–æ—Ä–æ–≤–µ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è',
    ],
  },
  gymFrequency: {
    label: '–Ø–∫ —á–∞—Å—Ç–æ —Ç—Ä–µ–Ω—É—î—à—Å—è?',
    options: [
      '–ù–µ —Ç—Ä–µ–Ω—É—é—Å—å',
      '–ü–ª–∞–Ω—É—é –ø–æ—á–∞—Ç–∏',
      '1-2 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å',
      '3-4 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å',
    ],
  },
  dietTracking: {
    label: '–°—Ç–µ–∂–∏—à –∑–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è–º?',
    options: [
      '–¢–∞–∫, —Ä–µ—Ç–µ–ª—å–Ω–æ —Ä–∞—Ö—É—é –∫–∞–ª–æ—Ä—ñ—ó —Ç–∞ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä—ñ—î–Ω—Ç–∏',
      '–¢–∞–∫, –Ω–∞–º–∞–≥–∞—é—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ö–∞—Ä—á—É–≤–∞—Ç–∏—Å—è, –∞–ª–µ –Ω–µ —Ä–∞—Ö—É—é –≤—Å–µ',
      '–ù—ñ, —ó–º —è–∫ –≤–∏—Ö–æ–¥–∏—Ç—å',
      '–•–∞—Ä—á—É—é—Å—å –ø–æ –ø–ª–∞–Ω—É –¥—ñ—î—Ç–æ–ª–æ–≥–∞',
    ],
  },
  mealPlanning: {
    label: '–Ø–∫ –∑–∞–∑–≤–∏—á–∞–π —Å–∫–ª–∞–¥–∞—î—à —Å–≤—ñ–π —Ä–∞—Ü—ñ–æ–Ω?',
    options: [
      '–°–∞–º–æ—Å—Ç—ñ–π–Ω–æ, –∫–æ—Ä–∏—Å—Ç—É—é—á–∏—Å—å –∑–Ω–∞–Ω–Ω—è–º–∏ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
      '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –º–æ–±—ñ–ª—å–Ω—ñ –∑–∞—Å—Ç–æ—Å—É–Ω–∫–∏',
      '–°–ø–æ–∂–∏–≤–∞—é —ó–∂—É —ñ–Ω—Ç—É—ó—Ç–∏–≤–Ω–æ, –ø–æ –≤—ñ–¥—á—É—Ç—Ç—è—Ö',
      '–û—Ç—Ä–∏–º—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤—ñ–¥ —Ç—Ä–µ–Ω–µ—Ä–∞ /–¥—ñ—î—Ç–æ–ª–æ–≥–∞',
    ],
  },
  mealChallenges: {
    label: '–Ø–∫—ñ –Ω–∞–π–±—ñ–ª—å—à—ñ —Ç—Ä—É–¥–Ω–æ—â—ñ –≤ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è?',
    options: [
      '–ë—Ä–∞–∫ —á–∞—Å—É',
      '–°–∫–ª–∞–¥–Ω–æ —Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó',
      '–ù–µ –∑–Ω–∞—é —â–æ –≥–æ—Ç—É–≤–∞—Ç–∏',
      '–î–æ—Ä–æ–≥—ñ –ø—Ä–æ–¥—É–∫—Ç–∏',
      '–ù–µ –¥–æ–≤—ñ—Ä—è—é –∑–∞—Å—Ç–æ—Å—É–Ω–∫–∞–º',
      '–Ü–Ω—à–µ',
    ],
  },
  autoGeneratedMenu: {
    label: '–ß–∏ –±—É–ª–æ –± —Ç–æ–±—ñ –∑—Ä—É—á–Ω–æ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –º–µ–Ω—é?',
    options: [
      '–¢–∞–∫, —Ü–µ –≤–∏—Ä—ñ—à–∏–ª–æ –± –º–æ—é –ø—Ä–æ–±–ª–µ–º—É',
      '–ú–æ–∂–ª–∏–≤–æ, —Ç—Ä–µ–±–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏',
      '–ù—ñ, –º–µ–Ω—ñ —Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ',
    ],
  },
  payForService: {
    label: '–ß–∏ –≥–æ—Ç–æ–≤–∏–π –ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ –¥–æ—Å—Ç—É–ø?',
    options: [
      '–¢–∞–∫, —è–∫—â–æ —Ü—ñ–Ω–∞ –±—É–¥–µ —Ä–æ–∑—É–º–Ω–æ—é',
      '–ù–µ –∑–Ω–∞—é, —Ç—Ä–µ–±–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏',
      '–ù—ñ, —è –∫—Ä–∞—â–µ –ø–ª–∞–Ω—É–≤–∞—Ç–∏–º—É —Å–∞–º',
    ],
  },
  preferredFormat: {
    label: '–Ø–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–∞—á—ñ –º–µ–Ω—é –Ω–∞–π–∑—Ä—É—á–Ω—ñ—à–∏–π?',
    options: [
      'üì± –ú–æ–±—ñ–ª—å–Ω–∏–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫',
      'üìÑ PDF-—Ç–∞–±–ª–∏—Ü—è –≤ Telegram',
      'üõí –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ + —Ä–µ—Ü–µ–ø—Ç–∏',
      '–Ü–Ω—à–µ',
    ],
  },
  testVersion: {
    label: '–ß–∏ —Ö–æ—Ç—ñ–≤ –±–∏ —Ç–∏ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–µ—Ä—à—É –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –≤–µ—Ä—Å—ñ—é?',
    options: ['–¢–∞–∫, –∑–∞–ª–∏—à–∞—é –∫–æ–Ω—Ç–∞–∫—Ç', '–ù—ñ, –¥—è–∫—É—é'],
  },
};

type FormData = {
  fitnessGoal: string;
  gymFrequency: string;
  dietTracking: string;
  mealPlanning: string;
  mealChallenges: string[];
  autoGeneratedMenu: string;
  payForService: string;
  preferredFormat: string;
  testVersion: string;
  contact?: string;
  mealChallengesOther?: string;
  preferredFormatOther?: string;
};

function Survey() {
  const {
    register,
    handleSubmit,
    watch,
    setValue,
    getValues,
    formState: { errors },
  } = useForm<FormData>({
    mode: 'onBlur',
  });
  const [submitted, setSubmitted] = useState(() => {
    const storedValue = sessionStorage.getItem('submittedQuestions');
    return storedValue ? JSON.parse(storedValue) : false;
  });

  useEffect(() => {
    sessionStorage.setItem('submittedQuestions', JSON.stringify(submitted));
  }, [submitted]);

  const onSubmit = async (data: FormData) => {
    if (data.mealChallenges.includes('–Ü–Ω—à–µ')) {
      data.mealChallenges = [
        ...data.mealChallenges,
        data.mealChallengesOther || '–Ü–Ω—à–µ',
      ].filter(Boolean);
    }
    if (data.preferredFormat === '–Ü–Ω—à–µ') {
      data.preferredFormat = data.preferredFormatOther || '–Ü–Ω—à–µ';
    }
    try {
      const response = await fetch('/api/saveResponse', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (response.ok) setSubmitted(true);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
    }
  };

  return (
    <div className="min-h-[500px] p-4">
      {' '}
      <div
        className={`max-w-lg mx-auto p-6 bg-white ${
          submitted ? '' : 'shadow-lg rounded-lg'
        } my-8 text-center`}
      >
        {submitted ? (
          <>
            <h2 className="text-center text-green-600 text-lg font-semibold h-fit my-10">
              –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!
            </h2>
            <Link
              href="#"
              className="p-2 rounded mt-4 shadow-md"
              onClick={e => {
                e.preventDefault();
                history.back();
              }}
            >
              –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥
            </Link>
          </>
        ) : (
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            {Object.entries(surveyQuestions).map(
              ([key, { label, options }]) => (
                <div key={key}>
                  <h2 className="text-xl font-bold">üîπ {label}</h2>
                  <div className="flex flex-col space-y-2">
                    {options.map(option => (
                      <label key={option} className="flex items-center">
                        <input
                          type={key === 'mealChallenges' ? 'checkbox' : 'radio'}
                          {...register(key as keyof FormData, {
                            required: "–¶–µ –ø–æ–ª–µ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º",
                          })}
                          value={option}
                          className="mr-2"
                        />
                        {option}
                      </label>
                    ))}
                    {(() => {
                      const watchValue = watch(key as keyof FormData);
                      // Check if the watchValue is an array or a string and handle accordingly
                      if (
                        Array.isArray(watchValue) &&
                        watchValue.includes('–Ü–Ω—à–µ')
                      ) {
                        return (
                          <input
                            type="text"
                            {...register(`${key}Other` as keyof FormData, {
                              maxLength: 100,
                            })}
                            className="w-full border p-2 rounded"
                            placeholder="–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç"
                          />
                        );
                      }
                      if (watchValue === '–Ü–Ω—à–µ') {
                        return (
                          <input
                            type="text"
                            {...register(`${key}Other` as keyof FormData, {
                              maxLength: 100,
                            })}
                            className="w-full border p-2 rounded"
                            placeholder="–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç"
                          />
                        );
                      }
                      return null;
                    })()}
                  </div>
                  {errors[key as keyof FormData] && (
                    <p className="text-red-600 text-sm">
                      {errors[key as keyof FormData]?.message}
                    </p>
                  )}
                </div>
              )
            )}
            {watch('testVersion') === '–¢–∞–∫, –∑–∞–ª–∏—à–∞—é –∫–æ–Ω—Ç–∞–∫—Ç' && (
              <div>
                <input
                  type="text"
                  placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                  {...register('contact', {
                    pattern: {
                      value: /^\+?\d{10,15}$/,
                      message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É',
                    },
                    required: "–¶–µ –ø–æ–ª–µ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º",
                  })}
                  className="w-full border p-2 rounded"
                />
                {errors.contact && (
                  <p className="text-red-600 text-sm">
                    {errors.contact?.message}
                  </p>
                )}
              </div>
            )}
            <button
              type="submit"
              className="w-full bg-blue-600 text-white p-2 rounded"
            >
              –ù–∞–¥—ñ—Å–ª–∞—Ç–∏
            </button>
          </form>
        )}
      </div>
    </div>
  );
}

export default Survey;
